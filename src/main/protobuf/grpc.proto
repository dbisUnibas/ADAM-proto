syntax = "proto3";

option java_package = "org.vitrivr.adam.grpc";

option java_outer_classname = "AdamGrpc";



//****  SERVICES ****//


service AdamDefinition {
  rpc CreateEntity(CreateEntityMessage) returns (AckMessage) {}
  rpc Count(EntityNameMessage) returns (AckMessage) {}
  rpc DropEntity(EntityNameMessage) returns (AckMessage) {}
  rpc ExistsEntity(EntityNameMessage) returns (ExistsMessage) {}
  rpc Insert(stream InsertMessage) returns (AckMessage) {}
  //creates an index on the data
  rpc Index(IndexMessage) returns (AckMessage) {}
  rpc GenerateAllIndexes(IndexMessage) returns (AckMessage) {}
  rpc ExistsIndex(IndexMessage) returns (ExistsMessage) {}
  rpc DropIndex(IndexNameMessage) returns (AckMessage) {}
  rpc ListIndexes(EntityNameMessage) returns (IndexesMessage) {}
  //generates an entity with random data and with all available indexes (for demo purposes)
  rpc GenerateRandomData(GenerateRandomDataMessage) returns (AckMessage) {}
  rpc ListEntities(EmptyMessage) returns (EntitiesMessage) {}
  rpc GetEntityProperties(EntityNameMessage) returns (EntityPropertiesMessage) {}
  rpc RepartitionEntityData(RepartitionMessage) returns (AckMessage) {}
  rpc RepartitionIndexData(RepartitionMessage) returns (AckMessage) {}
  rpc AdjustScanWeights(UpdateWeightsMessage) returns (AckMessage) {}
  rpc ResetScanWeights(EntityNameMessage) returns (AckMessage) {}
  rpc SetScanWeight(WeightMessage) returns (AckMessage) {}
  rpc SparsifyEntity(SparsifyEntityMessage) returns (AckMessage) {}
  rpc ImportData(ImportMessage) returns (AckMessage) {}
}

service AdamSearch {
  //caches an index explicitly (before performing a query to speed up retrieval time)
  rpc CacheIndex (IndexNameMessage) returns (AckMessage) {}
  rpc CacheEntity (EntityNameMessage) returns (AckMessage) {}
  rpc Preview(EntityNameMessage) returns (QueryResultsMessage) {}
  //performs a query on an entity with hints on which search method to use
  //(if no hint is specified a fallback is used)
  rpc DoQuery(QueryMessage) returns (QueryResultsMessage) {}
  rpc DoProgressiveQuery(QueryMessage) returns (stream QueryResultsMessage) {}
  //return cached results
  rpc GetCachedResults(CachedResultsMessage) returns (QueryResultsMessage) {}
}




//****  GLOBALS ****//

enum AttributeType {
  LONG = 0;
  INT = 1;
  FLOAT = 2;
  DOUBLE = 3;
  STRING = 4;
  TEXT = 5;
  BOOLEAN = 6;
  FEATURE = 7;
  AUTO = 8;
}

enum IndexType {
  ecp = 0;
  lsh = 1;
  mi = 2;
  pq = 3;
  sh = 4;
  vaf = 5;
  vav = 6;
}

message EmptyMessage {
}

message FeatureVectorMessage {
  oneof feature {
     DenseVectorMessage denseVector = 1;
     SparseVectorMessage sparseVector = 2;
     IntVectorMessage intVector = 3;
  }
}

message DenseVectorMessage {
  repeated float vector = 1 [packed=true];
}

message SparseVectorMessage {
  repeated float vector = 1 [packed=true];
  repeated int32 position = 2 [packed=true];
  int32 length = 3;
}

message IntVectorMessage {
  repeated int32 vector = 1 [packed=true];
}


message DataMessage {
  oneof datatype {
     int64 longData = 1;
     int32 intData = 2;
     float floatData = 3;
     double doubleData = 4;
     string stringData = 5;
     bool booleanData = 6;
     FeatureVectorMessage featureData = 7;
  }
}

enum HandlerType {
  relational = 0;
  feature = 1;
  solr = 2;
}


//****  DATA DEFINITION REQUESTS ****//

message CreateEntityMessage {
  string entity = 1;
  repeated AttributeDefinitionMessage attributes = 2;
}

message AttributeDefinitionMessage {
  string name = 1;
  AttributeType attributetype = 2;
  bool pk = 3;
  bool unique = 4;
  bool indexed = 5;
  HandlerType handler = 6;
}

message EntityNameMessage {
  string entity = 1;
}

message IndexNameMessage {
  string index = 1;
}

message GenerateRandomDataMessage {
  string entity = 1;
  int32 ntuples = 2;
  map<string, string> options = 3;
}

message InsertMessage {
  string entity = 1;
  repeated TupleInsertMessage tuples = 2;

  message TupleInsertMessage {
    map<string, DataMessage> data = 1;
  }
}

message IndexMessage {
  string entity = 1;
  string attribute = 2;
  IndexType indextype = 3;
  DistanceMessage distance = 4;
  //for possible options see each index structure
  map<string, string> options = 5;
}

message RepartitionMessage {
  string entity = 1; //entity or index
  int32 numberOfPartitions = 2;
  repeated string attributes = 3;
  enum PartitionOptions {
      CREATE_NEW = 0;
      REPLACE_EXISTING = 1;
      CREATE_TEMP = 2;
    }
  PartitionOptions option = 4;
  //Default will be handled by the API hopefully :)
  enum Partitioner {
      SPARK = 0;
      RANDOM = 1;
      CURRENT = 2;
    }
  Partitioner partitioner = 5;
  //for possible options see each Repartitioner
  map<string, string> options = 6;
}

message UpdateWeightsMessage {
  string entity = 1;
  string attribute = 2;
  bool benchmark = 3;
}

message WeightMessage {
  string entity = 1; //entity or index
  string attribute = 2;
  float weight = 3;
}

message SparsifyEntityMessage {
  string entity = 1;
  string attribute = 2;
}

message ImportMessage {
//EXPERIMENTAL!
  string host = 1;
  string database = 2;
  string username = 3;
  string password = 4;
}






//****  QUERY REQUESTS ****//

message QueryMessage {
  //optional queryid, which is returned by ADAMpro in the response if set in request
  string queryid = 1;
  //SELECT ...
  ProjectionMessage projection = 2;
  //FROM ...
  FromMessage from = 3;
  //WHERE ...
  BooleanQueryMessage bq = 6;
  //USING DISTANCE ...
  NearestNeighbourQueryMessage nnq = 7;

  //for hints see  ch.unibas.dmi.dbis.adam.query.handler.QueryHints, possible values
  //include "index", "inexact", "ecp", "lsh", "mi", ""pq", "sh", "exact", "va", "vaf", "vav", "sequential", "predictive"
  //hints are used to chooose whether an index scan or a sequential scan, etc. should be used
  repeated string hints = 8;
  bool useFallback = 9;

  //maximum duration of query in ms
  int64 time = 10;

  //read query from cache if available with same query id
  bool readFromCache = 11;
  //put query into cache with given query id
  bool putInCache = 12;

  //the information level denotes how much information is returned by ADAMpro (note that depending on the level of information
  //the query might be performed slower!)
  //note that you can combine information levels!
  enum InformationLevel {
      //returns simple information for the full tree, but no intermediate results
      INFORMATION_FULL_TREE = 0;
      //returns only the information on the last step
      INFORMATION_LAST_STEP_ONLY = 1;
      //returns all intermediate results (slow!)
      INFORMATION_INTERMEDIATE_RESULTS = 2;
      //returns the provenance partition of the data
      WITH_PROVENANCE_PARTITION_INFORMATION = 3;
      //returns the provenance source of the data
      WITH_PROVENANCE_SOURCE_INFORMATION = 4;
    }
  repeated InformationLevel information = 13;
}

message ExpressionQueryMessage {
  string queryid = 1;
  enum Operation {
      UNION = 0;
      INTERSECT = 1;
      EXCEPT = 2;
    }

   enum OperationOrder {
      LEFTFIRST = 0;
      RIGHTFIRST = 1;
      PARALLEL = 2;
    }

   SubExpressionQueryMessage left = 2;
   Operation operation = 3;
   OperationOrder order = 4;
   SubExpressionQueryMessage right = 5;
}

message SubExpressionQueryMessage {
  string queryid = 1;
  oneof submessage {
    QueryMessage qm = 2;
    ExpressionQueryMessage eqm = 3;
    ExternalHandlerQueryMessage ehqm = 4;
  }
}

message ProjectionMessage {
  enum Operation {
    COUNT = 0;
    EXISTS = 1;
  }
  message AttributeNameMessage {
    repeated string attribute = 1;
  }
  oneof submessage {
    //either attributes are specified...
    AttributeNameMessage attributes = 1;
    //...or an operation
    Operation op = 2;
  }
}

message FromMessage {
  oneof source {
    //the source for the query is either an entity
    string entity = 1;
    //or an index (note that if you specify the index name, the hints are disregarded)
    string index = 2;
    //or a list of indexes
    IndexListMessage indexes = 3;
    //or an expression
    SubExpressionQueryMessage expression = 4;
  }
}

message IndexListMessage {
  repeated string indexes = 1;
}

message NearestNeighbourQueryMessage {
  //name of the attribute on which to perform the nearest neighbour query
  string attribute = 1;
  //query vector
  FeatureVectorMessage query = 2;
  //weights vector; the weights are element-wise multiplied when computing the distance
  FeatureVectorMessage weights = 3;
  //distance function to use
  DistanceMessage distance = 4;
  //number of nearest neighbors to retrieve
  int32 k = 5;
  //options to hand-over to scan, e.g.
  //nochecks - will not perform the isQueryConform check before executing query
  //numOfQ - parameter for LSH and SH Index
  //ks and max_pos_diff - parameter for for MI Index
  map<string, string> options = 6;
  //specifies whether only the candidates from the index search are returned and no exact distance computation is performed
  bool indexOnly = 7;
  //partitions ids to consider, optional, if not specified all partitions are considered
  repeated int32 partitions = 8;
}

message DistanceMessage {
  enum DistanceType {
    chisquared = 0;
    correlation = 1;
    cosine = 2;
    hamming = 3;
    jaccard = 4;
    kullbackleibler = 5;
    chebyshev = 6;
    euclidean = 7;
    squaredeuclidean = 8;
    manhattan = 9;
    minkowski = 10; //add option 'norm'
    spannorm = 11;
  }
  DistanceType distancetype = 1;
  map<string, string> options = 2;
}

message BooleanQueryMessage {
  //Boolean query parameters
  repeated WhereMessage where = 1;

  message WhereMessage {
    string attribute = 1;
    //if value starts on certain operators (e.g., != or IN), then the operation used in query is adapted, otherwise equality is used
    //TODO: possibly adjust to DataMessage, but in that case make sure that using where only non-feature attributes can be queried using WHERE
    string value = 2;
  }

  message JoinMessage {
    string table = 1;
    repeated string attributes = 2;
  }
}

message ExternalHandlerQueryMessage {
  string queryid = 1;
  string entity = 2;
  string handler = 3;
  map<string, string> params = 4;
}

message CachedResultsMessage {
  string queryid = 1;
}





//****  RESPONSES ****//
message AckMessage {
enum Code {
  OK = 0;
  ERROR = 1;
}
  Code code = 1;
  string message = 2;
}

message EntitiesMessage {
  AckMessage ack = 1;
  repeated string entities = 2;
}

message ExistsMessage {
  AckMessage ack = 1;
  bool exists = 2;
}

message IndexesMessage {
  AckMessage ack = 1;

  message IndexMessage {
    string index = 1;
    string attribute = 2;
    IndexType indextype = 3;
  }
  repeated IndexMessage indexes = 2;
}

message EntityPropertiesMessage {
  AckMessage ack = 1;
  string entity = 2;
  map<string, string> properties = 3;
}

message QueryResultsMessage {
  AckMessage ack = 1;
  repeated QueryResultInfoMessage responses = 2;
}

message QueryResultInfoMessage {
  //acknowledgement message returning status of query
  AckMessage ack = 1;
  //id of result given in the query request
  string queryid = 2;
  //confidence in results (between 0 - 1)
  double confidence = 3;
  //retrieval time
  int64 time = 4;
  //provenance information, source that returned results
  string source = 5;
  map<string, string> info = 6;
  //result list
  repeated QueryResultTupleMessage results = 7;
}

message QueryResultTupleMessage {
  map<string, DataMessage> data = 1;
}
